#!/usr/bin/env node

/**
 * Script pour tester directement l'API Resend et v√©rifier les domaines
 */

require('dotenv').config({ path: '.env.local' });

// R√©cup√©rer la cl√© API depuis les variables d'environnement
// Assurez-vous d'avoir d√©fini API_RESEND_SUPABASE_SMTP dans votre fichier .env.local
const RESEND_API_KEY = process.env.API_RESEND_SUPABASE_SMTP;

if (!RESEND_API_KEY) {
  console.error('‚ùå Erreur: API_RESEND_SUPABASE_SMTP non d√©finie dans .env.local');
  console.log('Cr√©ez un fichier .env.local avec:');
  console.log('API_RESEND_SUPABASE_SMTP=votre_cl√©_api_resend');
  process.exit(1);
}

async function testResendAPI() {
  console.log('üîç Test de l\'API Resend');
  console.log('=' .repeat(50));
  console.log('');

  // Test 1: V√©rifier les domaines configur√©s
  console.log('üìã Test 1: R√©cup√©ration des domaines...');
  try {
    const domainsResponse = await fetch('https://api.resend.com/domains', {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${RESEND_API_KEY}`,
        'Content-Type': 'application/json'
      }
    });

    if (!domainsResponse.ok) {
      const error = await domainsResponse.text();
      console.error('‚ùå Erreur API:', domainsResponse.status, error);
    } else {
      const domains = await domainsResponse.json();
      console.log('‚úÖ Domaines trouv√©s:');
      
      if (domains.data && domains.data.length > 0) {
        domains.data.forEach(domain => {
          console.log('');
          console.log(`  üìß Domaine: ${domain.name}`);
          console.log(`     Status: ${domain.status}`);
          console.log(`     R√©gion: ${domain.region}`);
          console.log(`     Cr√©√© le: ${domain.created_at}`);
          
          if (domain.status === 'verified') {
            console.log(`     ‚úÖ V√âRIFI√â - Vous pouvez utiliser: noreply@${domain.name}`);
          } else if (domain.status === 'pending') {
            console.log(`     ‚ö†Ô∏è  EN ATTENTE - Configuration DNS requise`);
            if (domain.records) {
              console.log(`     üìù Records DNS √† ajouter:`);
              domain.records.forEach(record => {
                console.log(`        - ${record.type}: ${record.name} ‚Üí ${record.value}`);
              });
            }
          } else {
            console.log(`     ‚ùå NON V√âRIFI√â`);
          }
        });
      } else {
        console.log('  ‚ö†Ô∏è  Aucun domaine configur√©');
        console.log('  ‚Üí Ajoutez un domaine sur https://resend.com/domains');
      }
    }
  } catch (error) {
    console.error('‚ùå Erreur:', error.message);
  }

  console.log('');
  console.log('=' .repeat(50));
  console.log('');

  // Test 2: Envoyer un email de test
  console.log('üìã Test 2: Envoi d\'un email de test...');
  
  // Utiliser l'email par d√©faut de Resend pour le test
  const testEmail = {
    from: 'onboarding@resend.dev', // Email de test fourni par Resend
    to: 'christophe.marshall.pro@gmail.com',
    subject: 'Test API Resend - Eagle Golf',
    html: `
      <h2>Test de l'API Resend</h2>
      <p>Si vous recevez cet email, votre cl√© API fonctionne correctement !</p>
      <p>Envoy√© le: ${new Date().toLocaleString('fr-FR')}</p>
      <hr>
      <p><small>Eagle Golf - Test d'int√©gration</small></p>
    `
  };

  try {
    const emailResponse = await fetch('https://api.resend.com/emails', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${RESEND_API_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(testEmail)
    });

    if (!emailResponse.ok) {
      const error = await emailResponse.text();
      console.error('‚ùå Erreur envoi:', emailResponse.status, error);
    } else {
      const result = await emailResponse.json();
      console.log('‚úÖ Email envoy√© avec succ√®s !');
      console.log('   ID:', result.id);
      console.log('   De:', testEmail.from);
      console.log('   √Ä:', testEmail.to);
      console.log('');
      console.log('üì¨ V√©rifiez votre bo√Æte mail (et les spams)');
    }
  } catch (error) {
    console.error('‚ùå Erreur:', error.message);
  }

  console.log('');
  console.log('=' .repeat(50));
  console.log('');

  // Test 3: V√©rifier les limites API
  console.log('üìã Test 3: V√©rification des limites API...');
  try {
    const apiKeysResponse = await fetch('https://api.resend.com/api-keys', {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${RESEND_API_KEY}`,
        'Content-Type': 'application/json'
      }
    });

    if (apiKeysResponse.ok) {
      console.log('‚úÖ Cl√© API valide et active');
    } else if (apiKeysResponse.status === 401) {
      console.error('‚ùå Cl√© API invalide ou expir√©e');
    } else if (apiKeysResponse.status === 429) {
      console.error('‚ö†Ô∏è  Limite de taux d√©pass√©e (Rate limit)');
    }
  } catch (error) {
    console.error('‚ùå Erreur:', error.message);
  }

  console.log('');
  console.log('=' .repeat(50));
  console.log('üìä R√©sum√©:');
  console.log('');
  console.log('Pour utiliser Resend avec Supabase:');
  console.log('1. Votre domaine doit √™tre v√©rifi√© (status: verified)');
  console.log('2. Utilisez un email de ce domaine comme "Sender email" dans Supabase');
  console.log('3. Si aucun domaine n\'est v√©rifi√©, utilisez temporairement: onboarding@resend.dev');
  console.log('');
  console.log('Configuration Supabase SMTP:');
  console.log('  Host: smtp.resend.com');
  console.log('  Port: 465');
  console.log('  Username: resend');
  console.log(`  Password: ${RESEND_API_KEY}`);
  console.log('  Sender email: [email d\'un domaine v√©rifi√© ou onboarding@resend.dev]');
}

// Lancer le test
testResendAPI().then(() => {
  console.log('\n‚ú® Test termin√©');
  process.exit(0);
}).catch(err => {
  console.error('Erreur:', err);
  process.exit(1);
});