#!/usr/bin/env node

/**
 * Script pour corriger les donn√©es d'exp√©rience mal format√©es dans la base de donn√©es
 * Convertit les cha√Ænes JSON et les anciens formats d'objet en tableaux d'objets corrects
 */

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.local' });

const supabaseUrl = process.env.EXPO_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Variables d\'environnement manquantes');
  console.error('Assurez-vous que EXPO_PUBLIC_SUPABASE_URL et SUPABASE_SERVICE_ROLE_KEY sont d√©finis dans .env.local');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function fixExperienceData() {
  console.log('üîß D√©but de la correction des donn√©es d\'exp√©rience...\n');

  try {
    // R√©cup√©rer tous les profils pro avec des exp√©riences
    const { data: profiles, error: fetchError } = await supabase
      .from('pro_profiles')
      .select('user_id, experience')
      .not('experience', 'is', null);

    if (fetchError) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des donn√©es:', fetchError);
      return;
    }

    console.log(`üìä ${profiles.length} profils trouv√©s avec des exp√©riences\n`);

    let fixedCount = 0;
    let errorCount = 0;

    for (const profile of profiles) {
      const { user_id, experience } = profile;
      let needsFix = false;
      let fixedExperience = null;

      // Analyser le format actuel
      if (typeof experience === 'string') {
        // C'est une cha√Æne JSON qui doit √™tre pars√©e
        console.log(`üîç User ${user_id}: Cha√Æne JSON d√©tect√©e`);
        try {
          fixedExperience = JSON.parse(experience);
          if (!Array.isArray(fixedExperience)) {
            console.log(`  ‚ö†Ô∏è Le r√©sultat n'est pas un tableau, conversion en tableau vide`);
            fixedExperience = [];
          }
          needsFix = true;
        } catch (e) {
          console.log(`  ‚ùå Erreur de parsing, conversion en tableau vide`);
          fixedExperience = [];
          needsFix = true;
        }
      } else if (typeof experience === 'object' && !Array.isArray(experience)) {
        // C'est un objet (ancien format avec compteurs)
        console.log(`üîç User ${user_id}: Ancien format d'objet d√©tect√©`);
        fixedExperience = [];
        needsFix = true;
      } else if (Array.isArray(experience)) {
        // C'est d√©j√† un tableau, v√©rifier qu'il est valide
        console.log(`‚úÖ User ${user_id}: Format correct (tableau)`);
        // Pas besoin de correction
      } else {
        console.log(`‚ùì User ${user_id}: Format inconnu, conversion en tableau vide`);
        fixedExperience = [];
        needsFix = true;
      }

      // Appliquer la correction si n√©cessaire
      if (needsFix) {
        const { error: updateError } = await supabase
          .from('pro_profiles')
          .update({ experience: fixedExperience })
          .eq('user_id', user_id);

        if (updateError) {
          console.log(`  ‚ùå Erreur lors de la mise √† jour:`, updateError);
          errorCount++;
        } else {
          console.log(`  ‚úÖ Donn√©es corrig√©es avec succ√®s`);
          fixedCount++;
        }
      }
    }

    console.log('\nüìä R√©sum√©:');
    console.log(`  ‚úÖ ${fixedCount} profils corrig√©s`);
    console.log(`  ‚ùå ${errorCount} erreurs`);
    console.log(`  üìù ${profiles.length - fixedCount - errorCount} profils d√©j√† au bon format`);
    console.log('\n‚ú® Correction termin√©e!');

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error);
  }
}

// Ex√©cuter le script
fixExperienceData();