#!/usr/bin/env node

/**
 * Script de test pour v√©rifier que l'upload d'image fonctionne
 */

const fs = require('fs');
const path = require('path');

console.log('üîç Test de la correction de l\'upload d\'image\n');

// Couleurs pour la console
const colors = {
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  reset: '\x1b[0m'
};

const success = (msg) => console.log(`${colors.green}‚úÖ ${msg}${colors.reset}`);
const error = (msg) => console.log(`${colors.red}‚ùå ${msg}${colors.reset}`);
const info = (msg) => console.log(`${colors.blue}‚ÑπÔ∏è  ${msg}${colors.reset}`);

let hasErrors = false;

// Test 1: V√©rifier que ProfileService est import√© correctement
console.log('üìÅ 1. V√©rification de l\'import ProfileService...');
const useImageUploadPath = path.join(__dirname, '..', 'hooks', 'useImageUpload.ts');
const useImageUploadContent = fs.readFileSync(useImageUploadPath, 'utf8');

if (useImageUploadContent.includes("import { profileService } from '@/services/profile.service'")) {
  success('Import profileService correct (instance, pas classe)');
} else if (useImageUploadContent.includes("import { ProfileService } from")) {
  error('Import ProfileService incorrect (classe au lieu d\'instance)');
  hasErrors = true;
} else {
  error('Import ProfileService non trouv√©');
  hasErrors = true;
}

// Test 2: V√©rifier qu'on n'instancie pas ProfileService
console.log('\nüìÅ 2. V√©rification de l\'utilisation de ProfileService...');
if (useImageUploadContent.includes('new ProfileService()')) {
  error('ProfileService est instanci√© avec "new" (ne devrait pas)');
  hasErrors = true;
} else {
  success('ProfileService n\'est pas instanci√© avec "new"');
}

// Test 3: V√©rifier que MediaTypeOptions a √©t√© remplac√©
console.log('\nüìÅ 3. V√©rification de MediaTypeOptions...');
if (useImageUploadContent.includes('MediaTypeOptions')) {
  error('MediaTypeOptions est encore utilis√© (deprecated)');
  hasErrors = true;
} else if (useImageUploadContent.includes("mediaTypes: ['images']")) {
  success('Utilise le nouveau format mediaTypes');
} else {
  error('Format mediaTypes non trouv√©');
  hasErrors = true;
}

// Test 4: V√©rifier que profileService est export√© correctement
console.log('\nüìÅ 4. V√©rification de l\'export dans profile.service.ts...');
const profileServicePath = path.join(__dirname, '..', 'services', 'profile.service.ts');
const profileServiceContent = fs.readFileSync(profileServicePath, 'utf8');

if (profileServiceContent.includes('export const profileService = new ProfileService()')) {
  success('profileService est bien export√© comme instance');
} else if (profileServiceContent.includes('export class ProfileService')) {
  error('ProfileService est export√© comme classe (devrait √™tre une instance)');
  hasErrors = true;
} else {
  info('Export profileService non standard');
}

// Test 5: V√©rifier uploadProfileImage dans ProfileService
console.log('\nüìÅ 5. V√©rification de uploadProfileImage...');
if (profileServiceContent.includes('uploadProfileImage')) {
  success('M√©thode uploadProfileImage existe dans ProfileService');
} else {
  error('M√©thode uploadProfileImage non trouv√©e');
  hasErrors = true;
}

// R√©sum√©
console.log('\n' + '='.repeat(50));
console.log('üìä R√âSUM√â DE LA CORRECTION');
console.log('='.repeat(50));

if (!hasErrors) {
  console.log(`\n${colors.green}üéâ SUCC√àS : Les corrections sont appliqu√©es !${colors.reset}`);
  console.log('\nüí° Pour tester :');
  console.log('  1. Relance l\'app : npx expo start -c --port 8082');
  console.log('  2. Va dans Profil ‚Üí Modifier le profil');
  console.log('  3. S√©lectionne une photo');
  console.log('  4. L\'upload devrait fonctionner sans erreur');
  console.log('\nüìå Changements appliqu√©s :');
  console.log('  ‚Ä¢ Import profileService (instance) au lieu de ProfileService (classe)');
  console.log('  ‚Ä¢ MediaTypeOptions remplac√© par [\'images\']');
  console.log('  ‚Ä¢ Pas d\'instanciation avec new ProfileService()');
} else {
  console.log(`\n${colors.red}‚ö†Ô∏è  ATTENTION : Des probl√®mes subsistent${colors.reset}`);
  console.log('Corrigez les erreurs ci-dessus avant de tester.');
}

process.exit(hasErrors ? 1 : 0);