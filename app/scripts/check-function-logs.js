const { createClient } = require('@supabase/supabase-js');

// Configuration
const supabaseUrl = 'https://vrpsulmidpgxmkybgtwn.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZycHN1bG1pZHBneG1reWJndHduIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1MjU4NDU3MiwiZXhwIjoyMDY4MTYwNTcyfQ.oCuTPSxWy6qellMYB4talX6qbfa3eabz556fX6J_Ruo';

const supabase = createClient(supabaseUrl, supabaseKey);

async function checkLogs() {
  console.log('üîç V√©rification des logs et donn√©es...\n');

  // 1. V√©rifier les payment_logs
  console.log('1Ô∏è‚É£ Payment Logs:');
  const { data: paymentLogs, error: paymentError } = await supabase
    .from('payment_logs')
    .select('*')
    .order('processed_at', { ascending: false })
    .limit(5);

  if (paymentError) {
    console.log('   ‚ùå Erreur:', paymentError.message);
  } else if (paymentLogs && paymentLogs.length > 0) {
    paymentLogs.forEach(log => {
      console.log(`   - ${log.payment_intent_id}: ${log.status} (${log.processed_at})`);
    });
  } else {
    console.log('   ‚ö†Ô∏è Aucun log de paiement trouv√©');
  }

  // 2. V√©rifier les r√©servations r√©centes
  console.log('\n2Ô∏è‚É£ R√©servations r√©centes:');
  const { data: bookings, error: bookingError } = await supabase
    .from('bookings')
    .select('id, status, payment_status, admin_validation_status, payment_intent_id, created_at')
    .order('created_at', { ascending: false })
    .limit(10);

  if (bookingError) {
    console.log('   ‚ùå Erreur:', bookingError.message);
  } else if (bookings && bookings.length > 0) {
    bookings.forEach(booking => {
      console.log(`   - ID: ${booking.id.substring(0,8)}...`);
      console.log(`     Status: ${booking.status} | Payment: ${booking.payment_status} | Admin: ${booking.admin_validation_status}`);
      console.log(`     Payment Intent: ${booking.payment_intent_id || 'N/A'}`);
      console.log(`     Created: ${booking.created_at}\n`);
    });
  } else {
    console.log('   ‚ö†Ô∏è Aucune r√©servation trouv√©e');
  }

  // 3. V√©rifier les validations admin
  console.log('\n3Ô∏è‚É£ Validations Admin:');
  const { data: validations, error: validationError } = await supabase
    .from('admin_booking_validations')
    .select('*')
    .order('created_at', { ascending: false })
    .limit(5);

  if (validationError) {
    console.log('   ‚ùå Erreur:', validationError.message);
  } else if (validations && validations.length > 0) {
    validations.forEach(val => {
      console.log(`   - Booking: ${val.booking_id.substring(0,8)}... | Status: ${val.status}`);
    });
  } else {
    console.log('   ‚ö†Ô∏è Aucune validation trouv√©e');
  }

  // 4. Statistiques
  console.log('\n4Ô∏è‚É£ Statistiques:');
  const { count: totalBookings } = await supabase
    .from('bookings')
    .select('*', { count: 'exact', head: true });
  
  const { count: confirmedBookings } = await supabase
    .from('bookings')
    .select('*', { count: 'exact', head: true })
    .eq('status', 'confirmed');
    
  const { count: pendingBookings } = await supabase
    .from('bookings')
    .select('*', { count: 'exact', head: true })
    .eq('status', 'pending');

  console.log(`   - Total r√©servations: ${totalBookings || 0}`);
  console.log(`   - Confirm√©es: ${confirmedBookings || 0}`);
  console.log(`   - En attente: ${pendingBookings || 0}`);
}

checkLogs().catch(console.error);