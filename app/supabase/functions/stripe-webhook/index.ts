import { serve } from 'https://deno.land/std@0.168.0/http/server.ts';
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';
import Stripe from 'https://esm.sh/stripe@14.21.0';

const stripe = new Stripe(Deno.env.get('STRIPE_SECRET_KEY') ?? '', {
  apiVersion: '2023-10-16',
  httpClient: Stripe.createFetchHttpClient(),
});

serve(async (req) => {
  // Accepter les requ√™tes OPTIONS pour CORS
  if (req.method === 'OPTIONS') {
    return new Response('ok', {
      headers: {
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Headers': '*',
      },
    });
  }

  try {
    // Initialiser Supabase avec la cl√© service (pour √©criture en base)
    const supabaseClient = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
    );

    const signature = req.headers.get('stripe-signature');
    const body = await req.text();

    if (!signature) {
      console.log('‚ö†Ô∏è Webhook appel√© sans signature Stripe');
      return new Response(JSON.stringify({ error: 'Signature Stripe manquante' }), {
        headers: { 'Content-Type': 'application/json' },
        status: 400,
      });
    }

    // V√©rifier la signature du webhook (version asynchrone pour Deno)
    const webhookSecret = Deno.env.get('STRIPE_WEBHOOK_SECRET') ?? '';
    const event = await stripe.webhooks.constructEventAsync(body, signature, webhookSecret);

    console.log(`Webhook re√ßu: ${event.type}`);

    switch (event.type) {
      case 'payment_intent.succeeded': {
        const paymentIntent = event.data.object as Stripe.PaymentIntent;

        // Log du paiement r√©ussi
        console.log(`Paiement r√©ussi: ${paymentIntent.id}`);

        // Optionnel: Mettre √† jour le statut dans une table de logs
        const { error: logError } = await supabaseClient.from('payment_logs').insert({
          payment_intent_id: paymentIntent.id,
          status: 'succeeded',
          amount: paymentIntent.amount,
          currency: paymentIntent.currency,
          metadata: paymentIntent.metadata,
          processed_at: new Date().toISOString(),
        });

        if (logError) {
          console.error('Erreur log paiement:', logError);
        }

        // IMPORTANT: Mettre √† jour la r√©servation correspondante
        const { data: booking, error: updateError } = await supabaseClient
          .from('bookings')
          .update({
            payment_status: 'paid',
            status: 'confirmed', // Passage de pending √† confirmed
            admin_validation_status: 'auto_approved', // Approbation automatique apr√®s paiement r√©ussi
            confirmed_at: new Date().toISOString(),
          })
          .eq('payment_intent_id', paymentIntent.id)
          .select()
          .single();

        if (updateError) {
          console.error('‚ùå Erreur mise √† jour r√©servation:', updateError);
        } else if (booking) {
          console.log('‚úÖ R√©servation confirm√©e automatiquement:', booking.id);

          // Mettre √† jour √©galement la table admin_booking_validations si elle existe
          const { error: validationError } = await supabaseClient
            .from('admin_booking_validations')
            .update({
              status: 'approved',
            })
            .eq('booking_id', booking.id);

          if (validationError) {
            console.warn(
              '‚ö†Ô∏è Impossible de mettre √† jour admin_booking_validations:',
              validationError
            );
          }

          // üöÄ NOUVEAU: Envoyer notification push pour paiement r√©ussi
          try {
            const { data: pushResult, error: pushError } = await supabaseClient.functions.invoke(
              'send-push-notification',
              {
                body: {
                  userId: booking.amateur_id,
                  title: 'üí≥ Paiement confirm√©',
                  body: 'Votre le√ßon de golf a √©t√© r√©serv√©e avec succ√®s !',
                  type: 'payment_received',
                  priority: 'high',
                  data: {
                    bookingId: booking.id,
                    screen: '/bookings/details',
                    action: 'view_booking',
                  },
                },
              }
            );

            if (pushError) {
              console.warn('‚ö†Ô∏è Erreur envoi push notification paiement:', pushError);
            } else {
              console.log('‚úÖ Push notification paiement envoy√©e:', pushResult);
            }
          } catch (pushErr) {
            console.warn('‚ö†Ô∏è Exception push notification paiement:', pushErr);
            // Ne pas faire √©chouer le webhook si la push notification √©choue
          }

          // üì® Cr√©er notification in-app (syst√®me existant)
          try {
            const { error: notifError } = await supabaseClient.from('notifications').insert({
              user_id: booking.amateur_id,
              type: 'payment_received',
              title: 'Paiement confirm√©',
              message: `Votre paiement de ${(paymentIntent.amount / 100).toFixed(2)}‚Ç¨ a √©t√© confirm√©. Votre le√ßon est r√©serv√©e !`,
              data: {
                booking_id: booking.id,
                payment_intent_id: paymentIntent.id,
                amount: paymentIntent.amount,
              },
            });

            if (notifError) {
              console.warn('‚ö†Ô∏è Erreur cr√©ation notification in-app:', notifError);
            } else {
              console.log('‚úÖ Notification in-app cr√©√©e pour paiement');
            }
          } catch (notifErr) {
            console.warn('‚ö†Ô∏è Exception notification in-app:', notifErr);
          }
        }

        break;
      }

      case 'payment_intent.payment_failed': {
        const paymentIntent = event.data.object as Stripe.PaymentIntent;

        console.log(`Paiement √©chou√©: ${paymentIntent.id}`);

        // Log de l'√©chec
        const { error: logError } = await supabaseClient.from('payment_logs').insert({
          payment_intent_id: paymentIntent.id,
          status: 'failed',
          amount: paymentIntent.amount,
          currency: paymentIntent.currency,
          metadata: paymentIntent.metadata,
          processed_at: new Date().toISOString(),
          error_message: paymentIntent.last_payment_error?.message,
        });

        if (logError) {
          console.error('Erreur log √©chec paiement:', logError);
        }

        // üö® NOUVEAU: Envoyer notification push pour paiement √©chou√©
        // R√©cup√©rer la r√©servation associ√©e pour notifier l'utilisateur
        const { data: failedBooking } = await supabaseClient
          .from('bookings')
          .select('id, amateur_id')
          .eq('payment_intent_id', paymentIntent.id)
          .single();

        if (failedBooking) {
          try {
            const { data: pushResult, error: pushError } = await supabaseClient.functions.invoke(
              'send-push-notification',
              {
                body: {
                  userId: failedBooking.amateur_id,
                  title: 'üí≥ √âchec du paiement',
                  body: "Votre paiement n'a pas pu √™tre trait√©. Veuillez r√©essayer.",
                  type: 'payment_failed',
                  priority: 'high',
                  data: {
                    bookingId: failedBooking.id,
                    screen: '/bookings/retry-payment',
                    action: 'retry_payment',
                    paymentIntentId: paymentIntent.id,
                  },
                },
              }
            );

            if (pushError) {
              console.warn('‚ö†Ô∏è Erreur envoi push notification √©chec paiement:', pushError);
            } else {
              console.log('‚úÖ Push notification √©chec paiement envoy√©e:', pushResult);
            }
          } catch (pushErr) {
            console.warn('‚ö†Ô∏è Exception push notification √©chec paiement:', pushErr);
          }

          // üì® Cr√©er notification in-app pour √©chec paiement
          try {
            const errorMessage = paymentIntent.last_payment_error?.message || 'Erreur inconnue';
            const { error: notifError } = await supabaseClient.from('notifications').insert({
              user_id: failedBooking.amateur_id,
              type: 'payment_failed',
              title: '√âchec du paiement',
              message: `Votre paiement de ${(paymentIntent.amount / 100).toFixed(2)}‚Ç¨ a √©chou√©: ${errorMessage}`,
              data: {
                booking_id: failedBooking.id,
                payment_intent_id: paymentIntent.id,
                amount: paymentIntent.amount,
                error_message: errorMessage,
              },
            });

            if (notifError) {
              console.warn('‚ö†Ô∏è Erreur cr√©ation notification in-app √©chec:', notifError);
            } else {
              console.log('‚úÖ Notification in-app cr√©√©e pour √©chec paiement');
            }
          } catch (notifErr) {
            console.warn('‚ö†Ô∏è Exception notification in-app √©chec:', notifErr);
          }
        }

        break;
      }

      case 'charge.dispute.created': {
        const dispute = event.data.object as Stripe.Dispute;

        console.log(`Litige cr√©√©: ${dispute.id}`);

        // Notifier l'√©quipe support (par email ou autre)
        // Ici vous pourriez ajouter une logique de notification

        break;
      }

      default:
        console.log(`Type d'√©v√©nement non g√©r√©: ${event.type}`);
    }

    return new Response(JSON.stringify({ received: true }), {
      headers: { 'Content-Type': 'application/json' },
      status: 200,
    });
  } catch (error: any) {
    console.error('Erreur webhook Stripe:', error);

    return new Response(
      JSON.stringify({
        error: error.message || 'Erreur traitement webhook',
        received: false,
      }),
      {
        headers: { 'Content-Type': 'application/json' },
        status: 400,
      }
    );
  }
});
